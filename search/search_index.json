{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Yacht Intro A web interface for managing docker containers with an emphasis on templating to provide one-click deployments of dockerized applications. Think of it like a decentralized app store for servers that anyone can make packages for. Features Container templating compatibility (Portainer compatible) Basic container management Easy template updating Template Variables to allow for a one-click experience Guided container deployment Dashboard for monitoring all of your docker containers in one place Features (Coming Soon!) Advanced container managment (edit/modify, networks, volumes) Docker-compose compatibility User Managment One click updating of containers. If you want something that's not planned please open a feature request issue and we'll see about getting it added. Templates Currently Yacht is compatible with portainer templates. You'll add a template url in the \"Add Template\" settings. The the template will be read, separated into apps, and imported into the database. The apps associated with the templates are linked via a db relationship so when the template is removed, so are the apps associated with it. We store the template url as well so we can enable updating templates with a button press. We recommend starting with: https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/yacht/Template/template.json In templates you are able to define variables (starting with ! ) to have them automatically replaced by whatever variable the user has set in their server settings (ie. !config will be replaced by /yacht/AppData/Config by default).","title":"Home"},{"location":"#welcome-to-yacht","text":"","title":"Welcome to Yacht"},{"location":"#intro","text":"A web interface for managing docker containers with an emphasis on templating to provide one-click deployments of dockerized applications. Think of it like a decentralized app store for servers that anyone can make packages for.","title":"Intro"},{"location":"#features","text":"Container templating compatibility (Portainer compatible) Basic container management Easy template updating Template Variables to allow for a one-click experience Guided container deployment Dashboard for monitoring all of your docker containers in one place","title":"Features"},{"location":"#features-coming-soon","text":"Advanced container managment (edit/modify, networks, volumes) Docker-compose compatibility User Managment One click updating of containers. If you want something that's not planned please open a feature request issue and we'll see about getting it added.","title":"Features (Coming Soon!)"},{"location":"#templates","text":"Currently Yacht is compatible with portainer templates. You'll add a template url in the \"Add Template\" settings. The the template will be read, separated into apps, and imported into the database. The apps associated with the templates are linked via a db relationship so when the template is removed, so are the apps associated with it. We store the template url as well so we can enable updating templates with a button press. We recommend starting with: https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/yacht/Template/template.json In templates you are able to define variables (starting with ! ) to have them automatically replaced by whatever variable the user has set in their server settings (ie. !config will be replaced by /yacht/AppData/Config by default).","title":"Templates"},{"location":"Installation/requirements/","text":"Requirements Supported Architectures Yacht is built for the following architectures: linux/amd64 linux/arm/v7 linux/arm64 It may work on others such as Windows or MacOS but they will not be officially supported. Software Requirements The latest version of docker is recommended. Instructions for how to install it are available here .","title":"Requirements"},{"location":"Installation/requirements/#requirements","text":"","title":"Requirements"},{"location":"Installation/requirements/#supported-architectures","text":"Yacht is built for the following architectures: linux/amd64 linux/arm/v7 linux/arm64 It may work on others such as Windows or MacOS but they will not be officially supported.","title":"Supported Architectures"},{"location":"Installation/requirements/#software-requirements","text":"The latest version of docker is recommended. Instructions for how to install it are available here .","title":"Software Requirements"},{"location":"Installation/yacht/","text":"Install Yacht via Docker Installing Yacht via docker is as simple as running two commands: docker volume create yacht docker run -d -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock -v yacht:/config selfhostedpro/yacht This will start Yacht on port 8000 (change this to 8001 if you're also using portainer). The default credentials are admin@yacht.local and pass .","title":"Yacht"},{"location":"Installation/yacht/#install-yacht","text":"","title":"Install Yacht"},{"location":"Installation/yacht/#via-docker","text":"Installing Yacht via docker is as simple as running two commands: docker volume create yacht docker run -d -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock -v yacht:/config selfhostedpro/yacht This will start Yacht on port 8000 (change this to 8001 if you're also using portainer). The default credentials are admin@yacht.local and pass .","title":"via Docker"},{"location":"Pages/applications/","text":"","title":"Applications"},{"location":"Pages/dashboard/","text":"","title":"Dashboard"},{"location":"Pages/serverSettings/","text":"","title":"Server Settings"},{"location":"Pages/templates/","text":"","title":"Templates"},{"location":"Pages/userSettings/","text":"","title":"User Settings"},{"location":"Templates/templates/","text":"Templates This page will go over building a template. The templates are all compatible with portainer v1 templates so you can always check that documentation too. All of the keys (type, name, title, etc.) are optional and will simply be blank if left empty. Single app templates will be surrounded by {} as is standard for .json files. Multi app templates with consist of multiple {} sections (separated with a , after the } (ie. }, )). More info on writing JSON is available here { \"type\" : 1 , \"title\" : \"App Title\" , \"name\" : \"container-name\" , \"description\" : \"This is a description.\" , \"logo\" : \"https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/transmission-icon.png\" , \"image\" : \"dev/application:latest\" , \"note\" : \"This is a note\" , \"categories\" : [ \"Other\" , \"Tools\" ], \"platform\" : \"linux\" , \"restart_policy\" : \"unless-stopped\" , \"ports\" : [ \"9091:9091/tcp\" , \"9090:9090/tcp\" ], \"volumes\" : [ { \"container\" : \"/data\" , \"bind\" : \"!downloads\" }, { \"container\" : \"/etc/localtime\" , \"bind\" : \"!localtime\" } ], \"sysctls\" : [ { \"net.ipv6.conf.all.disable_ipv6\" : \"0\" } ], \"cap_add\" : [ \"NET_ADMIN\" ], \"env\" : [ { \"name\" : \"PUID\" , \"label\" : \"PUID\" , \"default\" : \"1000\" }, { \"name\" : \"PGID\" , \"label\" : \"PGID\" , \"default\" : \"1000\" }, { \"name\" : \"EnvWithDescription\" , \"label\" : \"EnvWithDescription\" , \"description\" : \"This is a description\" , \"default\" : \"default\" } ] } This is what each section does: type \"type\" : 1 , This currently isn't in use. It's just here to keep compatibility with portainer but is ignored. title \"title\" : \"Transmission-OpenVPN\" , This is what is displayed when in the apps list page. Punctuation is nice here and adds to the polish name \"name\" : \"transmission-openvpn\" , This is what the actual container is named. Information on this is here . description \"description\" : \"This container contains OpenVPN and Transmission with a configuration\\nwhere Transmission is running only when OpenVPN has an active tunnel.\\nIt bundles configuration files for many popular VPN providers to make the setup easier.\" , This is the description that is shown in the app list. \\n is interpreted as a newline character logo \"logo\" : \"https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/transmission-icon.png\" , This is the logo that is show in the app list. image \"image\" : \"haugene/transmission-openvpn:latest\" , This is the image that's pulled from dockerhub. The tag ( :latest ) is optional. note \"note\" : \"List of supported providers available <a href='https://haugene.github.io/docker-transmission-openvpn/supported-providers'/>here</a>.\" , This is shown when someone clicks on \"VIEW\" in the app list. It will render HTML appropriately. categories \"categories\" : [ \"Other\" , \"VPN\" , \"Tools\" ] , A list of categories associated with the application. This is optional but sorting/filtering by category will eventually be a feature. platform \"platform\" : \"linux\" , The platform the image will run on. Haven't tested anything but linux. restart_policy \"restart_policy\" : \"unless-stopped\" , Define your restart policy. Info here . ports \"ports\" : [ \"9091:9091/tcp\" , \"9090:9090/tcp\" , \"9092/tcp\" ] , Ports to be passed through. The host port is on the left of the : and the container port is on the right. Protocol is after the / . If no host port is specified a random one is used. I frequently leave out the host port on applications that use common ports. Port Labels \"ports\" : [ { \"WebUI\" : \"8096:8096/tcp\" , \"HTTPS WebUI\" : \"8920:8920/tcp\" , \"DNLA\" : \"1900:1900/udp\" , \"Discovery\" : \"7359:7359/udp\" } ] , You can label ports for the services that are on them if you would like. This will auto-fill the label field in the deploy form and give users a better understanding of the applications they're running. volumes \"volumes\" : [ { \"container\" : \"/data\" , \"bind\" : \"!downloads\" }, { \"container\" : \"/etc/localtime\" , \"bind\" : \"/etc/localtime\" } ] , List of bind mounts. Container will mount inside of the container and bind will mount on the host. The bind section can utilize Template Variables in the users settings so if they're set they'll be replaced by what's there. sysctls \"sysctls\" : [ { \"net.ipv6.conf.all.disable_ipv6\" : \"0\" } ] , Key value pair for sysctl options. More info available here cap_add \"cap_add\" : [ \"NET_ADMIN\" ] , Value of capabilities you want to add to a container. More info available here . env \"env\" : [ { \"name\" : \"PUID\" , \"label\" : \"PUID\" , \"default\" : \"1000\" }, { \"name\" : \"PGID\" , \"label\" : \"PGID\" , \"default\" : \"1000\" }, { \"name\" : \"EnvWithDescription\" , \"label\" : \"EnvWithDescription\" , \"description\" : \"This is a description\" , \"default\" : \"default\" }, ] Env is used to set environment variables within the docker container. The description and default are both optional. Label currently isn't used but will be what is shown as the name of the field in the deploy form. labels \"labels\" : [ { \"label\" : \"local.yacht.label\" , \"value\" : \"this is a label\" }, { \"label\" : \"local.yacht.otherlabel\" , \"value\" : \"this is another label\" } ] Labels can be used for automating services like traefik automatically as well as store information about containers (this is where port descriptions are stored on containers). These will show up in the advanced section like sysctls and capabilities. devices \"devices\" : [ { \"host\" : \"/dev/null\" , \"container\" : \"/dev/null\" } ] Devices allow devices to be passed through containers for things like transcoding. YAML Yaml templates are also supported and support all of the same options. Here is the example but converted to yaml: --- type : 1 title : App Title name : container-name description : This is a description. logo : https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/transmission-icon.png image : dev/application:latest note : This is a note categories : - Other - Tools platform : linux restart_policy : unless-stopped ports : - 9091:9091/tcp - 9090:9090/tcp volumes : - container : \"/data\" bind : \"!downloads\" - container : \"/etc/localtime\" bind : \"!localtime\" sysctls : - net.ipv6.conf.all.disable_ipv6 : '0' cap_add : - NET_ADMIN env : - name : PUID label : PUID default : '1000' - name : PGID label : PGID default : '1000' - name : EnvWithDescription label : EnvWithDescription description : This is a description default : default","title":"Templates"},{"location":"Templates/templates/#templates","text":"This page will go over building a template. The templates are all compatible with portainer v1 templates so you can always check that documentation too. All of the keys (type, name, title, etc.) are optional and will simply be blank if left empty. Single app templates will be surrounded by {} as is standard for .json files. Multi app templates with consist of multiple {} sections (separated with a , after the } (ie. }, )). More info on writing JSON is available here { \"type\" : 1 , \"title\" : \"App Title\" , \"name\" : \"container-name\" , \"description\" : \"This is a description.\" , \"logo\" : \"https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/transmission-icon.png\" , \"image\" : \"dev/application:latest\" , \"note\" : \"This is a note\" , \"categories\" : [ \"Other\" , \"Tools\" ], \"platform\" : \"linux\" , \"restart_policy\" : \"unless-stopped\" , \"ports\" : [ \"9091:9091/tcp\" , \"9090:9090/tcp\" ], \"volumes\" : [ { \"container\" : \"/data\" , \"bind\" : \"!downloads\" }, { \"container\" : \"/etc/localtime\" , \"bind\" : \"!localtime\" } ], \"sysctls\" : [ { \"net.ipv6.conf.all.disable_ipv6\" : \"0\" } ], \"cap_add\" : [ \"NET_ADMIN\" ], \"env\" : [ { \"name\" : \"PUID\" , \"label\" : \"PUID\" , \"default\" : \"1000\" }, { \"name\" : \"PGID\" , \"label\" : \"PGID\" , \"default\" : \"1000\" }, { \"name\" : \"EnvWithDescription\" , \"label\" : \"EnvWithDescription\" , \"description\" : \"This is a description\" , \"default\" : \"default\" } ] }","title":"Templates"},{"location":"Templates/templates/#this-is-what-each-section-does","text":"","title":"This is what each section does:"},{"location":"Templates/templates/#type","text":"\"type\" : 1 , This currently isn't in use. It's just here to keep compatibility with portainer but is ignored.","title":"type"},{"location":"Templates/templates/#title","text":"\"title\" : \"Transmission-OpenVPN\" , This is what is displayed when in the apps list page. Punctuation is nice here and adds to the polish","title":"title"},{"location":"Templates/templates/#name","text":"\"name\" : \"transmission-openvpn\" , This is what the actual container is named. Information on this is here .","title":"name"},{"location":"Templates/templates/#description","text":"\"description\" : \"This container contains OpenVPN and Transmission with a configuration\\nwhere Transmission is running only when OpenVPN has an active tunnel.\\nIt bundles configuration files for many popular VPN providers to make the setup easier.\" , This is the description that is shown in the app list. \\n is interpreted as a newline character","title":"description"},{"location":"Templates/templates/#logo","text":"\"logo\" : \"https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/transmission-icon.png\" , This is the logo that is show in the app list.","title":"logo"},{"location":"Templates/templates/#image","text":"\"image\" : \"haugene/transmission-openvpn:latest\" , This is the image that's pulled from dockerhub. The tag ( :latest ) is optional.","title":"image"},{"location":"Templates/templates/#note","text":"\"note\" : \"List of supported providers available <a href='https://haugene.github.io/docker-transmission-openvpn/supported-providers'/>here</a>.\" , This is shown when someone clicks on \"VIEW\" in the app list. It will render HTML appropriately.","title":"note"},{"location":"Templates/templates/#categories","text":"\"categories\" : [ \"Other\" , \"VPN\" , \"Tools\" ] , A list of categories associated with the application. This is optional but sorting/filtering by category will eventually be a feature.","title":"categories"},{"location":"Templates/templates/#platform","text":"\"platform\" : \"linux\" , The platform the image will run on. Haven't tested anything but linux.","title":"platform"},{"location":"Templates/templates/#restart_policy","text":"\"restart_policy\" : \"unless-stopped\" , Define your restart policy. Info here .","title":"restart_policy"},{"location":"Templates/templates/#ports","text":"\"ports\" : [ \"9091:9091/tcp\" , \"9090:9090/tcp\" , \"9092/tcp\" ] , Ports to be passed through. The host port is on the left of the : and the container port is on the right. Protocol is after the / . If no host port is specified a random one is used. I frequently leave out the host port on applications that use common ports.","title":"ports"},{"location":"Templates/templates/#port-labels","text":"\"ports\" : [ { \"WebUI\" : \"8096:8096/tcp\" , \"HTTPS WebUI\" : \"8920:8920/tcp\" , \"DNLA\" : \"1900:1900/udp\" , \"Discovery\" : \"7359:7359/udp\" } ] , You can label ports for the services that are on them if you would like. This will auto-fill the label field in the deploy form and give users a better understanding of the applications they're running.","title":"Port Labels"},{"location":"Templates/templates/#volumes","text":"\"volumes\" : [ { \"container\" : \"/data\" , \"bind\" : \"!downloads\" }, { \"container\" : \"/etc/localtime\" , \"bind\" : \"/etc/localtime\" } ] , List of bind mounts. Container will mount inside of the container and bind will mount on the host. The bind section can utilize Template Variables in the users settings so if they're set they'll be replaced by what's there.","title":"volumes"},{"location":"Templates/templates/#sysctls","text":"\"sysctls\" : [ { \"net.ipv6.conf.all.disable_ipv6\" : \"0\" } ] , Key value pair for sysctl options. More info available here","title":"sysctls"},{"location":"Templates/templates/#cap_add","text":"\"cap_add\" : [ \"NET_ADMIN\" ] , Value of capabilities you want to add to a container. More info available here .","title":"cap_add"},{"location":"Templates/templates/#env","text":"\"env\" : [ { \"name\" : \"PUID\" , \"label\" : \"PUID\" , \"default\" : \"1000\" }, { \"name\" : \"PGID\" , \"label\" : \"PGID\" , \"default\" : \"1000\" }, { \"name\" : \"EnvWithDescription\" , \"label\" : \"EnvWithDescription\" , \"description\" : \"This is a description\" , \"default\" : \"default\" }, ] Env is used to set environment variables within the docker container. The description and default are both optional. Label currently isn't used but will be what is shown as the name of the field in the deploy form.","title":"env"},{"location":"Templates/templates/#labels","text":"\"labels\" : [ { \"label\" : \"local.yacht.label\" , \"value\" : \"this is a label\" }, { \"label\" : \"local.yacht.otherlabel\" , \"value\" : \"this is another label\" } ] Labels can be used for automating services like traefik automatically as well as store information about containers (this is where port descriptions are stored on containers). These will show up in the advanced section like sysctls and capabilities.","title":"labels"},{"location":"Templates/templates/#devices","text":"\"devices\" : [ { \"host\" : \"/dev/null\" , \"container\" : \"/dev/null\" } ] Devices allow devices to be passed through containers for things like transcoding.","title":"devices"},{"location":"Templates/templates/#yaml","text":"Yaml templates are also supported and support all of the same options. Here is the example but converted to yaml: --- type : 1 title : App Title name : container-name description : This is a description. logo : https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/transmission-icon.png image : dev/application:latest note : This is a note categories : - Other - Tools platform : linux restart_policy : unless-stopped ports : - 9091:9091/tcp - 9090:9090/tcp volumes : - container : \"/data\" bind : \"!downloads\" - container : \"/etc/localtime\" bind : \"!localtime\" sysctls : - net.ipv6.conf.all.disable_ipv6 : '0' cap_add : - NET_ADMIN env : - name : PUID label : PUID default : '1000' - name : PGID label : PGID default : '1000' - name : EnvWithDescription label : EnvWithDescription description : This is a description default : default","title":"YAML"},{"location":"Templates/variables/","text":"","title":"Template Variables"}]}