{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Yacht Intro A web interface for managing docker containers with an emphasis on templating to provide one-click deployments of dockerized applications. Think of it like a decentralized app store for servers that anyone can make packages for. Features Container templating compatibility (Portainer compatible) Basic container management Easy template updating Template Variables to allow for a one-click experience Guided container deployment Dashboard for monitoring all of your docker containers in one place Features (Coming Soon!) Advanced container managment (edit/modify, networks, volumes) Docker-compose compatibility User Managment One click updating of containers. If you want something that's not planned please open a feature request issue and we'll see about getting it added. Templates Currently Yacht is compatible with portainer templates. You'll add a template url in the \"Add Template\" settings. The the template will be read, separated into apps, and imported into the database. The apps associated with the templates are linked via a db relationship so when the template is removed, so are the apps associated with it. We store the template url as well so we can enable updating templates with a button press. We recommend starting with: https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/yacht/Template/template.json In templates you are able to define variables (starting with ! ) to have them automatically replaced by whatever variable the user has set in their server settings (ie. !config will be replaced by /yacht/AppData/Config by default).","title":"Home"},{"location":"#welcome-to-yacht","text":"","title":"Welcome to Yacht"},{"location":"#intro","text":"A web interface for managing docker containers with an emphasis on templating to provide one-click deployments of dockerized applications. Think of it like a decentralized app store for servers that anyone can make packages for.","title":"Intro"},{"location":"#features","text":"Container templating compatibility (Portainer compatible) Basic container management Easy template updating Template Variables to allow for a one-click experience Guided container deployment Dashboard for monitoring all of your docker containers in one place","title":"Features"},{"location":"#features-coming-soon","text":"Advanced container managment (edit/modify, networks, volumes) Docker-compose compatibility User Managment One click updating of containers. If you want something that's not planned please open a feature request issue and we'll see about getting it added.","title":"Features (Coming Soon!)"},{"location":"#templates","text":"Currently Yacht is compatible with portainer templates. You'll add a template url in the \"Add Template\" settings. The the template will be read, separated into apps, and imported into the database. The apps associated with the templates are linked via a db relationship so when the template is removed, so are the apps associated with it. We store the template url as well so we can enable updating templates with a button press. We recommend starting with: https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/yacht/Template/template.json In templates you are able to define variables (starting with ! ) to have them automatically replaced by whatever variable the user has set in their server settings (ie. !config will be replaced by /yacht/AppData/Config by default).","title":"Templates"},{"location":"Installation/gettingstarted/","text":"Beginners Guide This guide will take you through setting up Yacht, adding your first template, and deploying your first app. Setting Up Yacht Running Yacht is as simple as running the following two commands: docker volume create yacht docker run -d -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock -v yacht:/config selfhostedpro/yacht After that you can access Yacht on port 8000 on your server in a web browser. If you're using Yacht alongside portainer you'll want to change the 8000 on the left of the : to 8001, then it will be available on that port on your host. Once you're at the login page you can login with the username admin@yacht.local and the password pass . Template Variables We'll setup template variables so that if you're using a template built for Yacht, you'll be able to have all of your files mounted in the correct places. Click on the Settings cog in the left sidebar and then click on Template Variables along the top. Replace the paths on the right with where you want each variable to be mounted. (This will typically be in your file shares if you're using a NAS). Add any additional Variables you would like and when you're done, hit save at the bottom. Adding a Template To add a template, click on the Folder icon in the left sidebar and then on \"New Template\". If you don't have a template added yet it'll recommend you add the one that I maintain for Yacht. Once you've entered a name and URL you'll click submit. Now that you're on the \"View Templates\" page you can click on the template you added to see all the apps included with your template. From the \"View Templates\" page you can also click on the 3 dots and from there you can update if there are any changes, view the template, or delete the template. Deploying from a Template Now that you have a template added let's deploy an application. Click on your template to view it. Then pick an app to deploy. You can click on view to see any details about the application. One you've got an app in mind click on deploy and you'll be taken to the deploy form. Everything should be filled out for you but double check that everything looks correct. Click on continue until you get to the last page and then click on Deploy. Now you'll see your running app. You can click on it to view more detailed stats or click on the Arrow to the right of the name to perform an action with it. Install Yacht via docker-compse The following is an example docker-compose.yml file to deploy Yacht: --- version : '3' services : yacht : container_name : yacht restart : unless-stopped ports : - 8000:8000 volumes : - yacht:/config - /var/run/docker.sock:/var/run/docker.sock image : selfhostedpro/yacht volumes : yacht :","title":"Getting Started"},{"location":"Installation/gettingstarted/#beginners-guide","text":"This guide will take you through setting up Yacht, adding your first template, and deploying your first app.","title":"Beginners Guide"},{"location":"Installation/gettingstarted/#setting-up-yacht","text":"Running Yacht is as simple as running the following two commands: docker volume create yacht docker run -d -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock -v yacht:/config selfhostedpro/yacht After that you can access Yacht on port 8000 on your server in a web browser. If you're using Yacht alongside portainer you'll want to change the 8000 on the left of the : to 8001, then it will be available on that port on your host. Once you're at the login page you can login with the username admin@yacht.local and the password pass .","title":"Setting Up Yacht"},{"location":"Installation/gettingstarted/#template-variables","text":"We'll setup template variables so that if you're using a template built for Yacht, you'll be able to have all of your files mounted in the correct places. Click on the Settings cog in the left sidebar and then click on Template Variables along the top. Replace the paths on the right with where you want each variable to be mounted. (This will typically be in your file shares if you're using a NAS). Add any additional Variables you would like and when you're done, hit save at the bottom.","title":"Template Variables"},{"location":"Installation/gettingstarted/#adding-a-template","text":"To add a template, click on the Folder icon in the left sidebar and then on \"New Template\". If you don't have a template added yet it'll recommend you add the one that I maintain for Yacht. Once you've entered a name and URL you'll click submit. Now that you're on the \"View Templates\" page you can click on the template you added to see all the apps included with your template. From the \"View Templates\" page you can also click on the 3 dots and from there you can update if there are any changes, view the template, or delete the template.","title":"Adding a Template"},{"location":"Installation/gettingstarted/#deploying-from-a-template","text":"Now that you have a template added let's deploy an application. Click on your template to view it. Then pick an app to deploy. You can click on view to see any details about the application. One you've got an app in mind click on deploy and you'll be taken to the deploy form. Everything should be filled out for you but double check that everything looks correct. Click on continue until you get to the last page and then click on Deploy. Now you'll see your running app. You can click on it to view more detailed stats or click on the Arrow to the right of the name to perform an action with it.","title":"Deploying from a Template"},{"location":"Installation/gettingstarted/#install-yacht-via-docker-compse","text":"The following is an example docker-compose.yml file to deploy Yacht: --- version : '3' services : yacht : container_name : yacht restart : unless-stopped ports : - 8000:8000 volumes : - yacht:/config - /var/run/docker.sock:/var/run/docker.sock image : selfhostedpro/yacht volumes : yacht :","title":"Install Yacht via docker-compse"},{"location":"Installation/requirements/","text":"Requirements Supported Architectures Yacht is built for the following architectures: linux/amd64 linux/arm/v7 linux/arm64 It may work on others such as Windows or MacOS but they will not be officially supported. Software Requirements The latest version of docker is recommended. Instructions for how to install it are available here .","title":"Requirements"},{"location":"Installation/requirements/#requirements","text":"","title":"Requirements"},{"location":"Installation/requirements/#supported-architectures","text":"Yacht is built for the following architectures: linux/amd64 linux/arm/v7 linux/arm64 It may work on others such as Windows or MacOS but they will not be officially supported.","title":"Supported Architectures"},{"location":"Installation/requirements/#software-requirements","text":"The latest version of docker is recommended. Instructions for how to install it are available here .","title":"Software Requirements"},{"location":"Installation/yacht/","text":"Install Yacht via Docker Installing Yacht via docker is as simple as running two commands: docker volume create yacht docker run -d -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock -v yacht:/config selfhostedpro/yacht This will start Yacht on port 8000 (change this to 8001 if you're also using portainer). The default credentials are admin@yacht.local and pass .","title":"Yacht"},{"location":"Installation/yacht/#install-yacht","text":"","title":"Install Yacht"},{"location":"Installation/yacht/#via-docker","text":"Installing Yacht via docker is as simple as running two commands: docker volume create yacht docker run -d -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock -v yacht:/config selfhostedpro/yacht This will start Yacht on port 8000 (change this to 8001 if you're also using portainer). The default credentials are admin@yacht.local and pass .","title":"via Docker"},{"location":"Pages/applications/","text":"Applications View Applications In the main view of the applications page you can see the following: Running Apps: App Name App Status App Image Ports/Port Labels Created time App Actions (down chevron to the left): Start Stop Restart Update (one click utilizing watchtower on the backend) Kill Remove Apps are sortable by the columns at the top or searchable via the searchbar at the top. Click on an app to view more details. Ports will be labeled if they were set when deployed. Application Info Info In this view you can see configuration settings for your container. Processes This page shows the processes currently running on your container. Logs The logs page will stream logs from the container to your browser so you don't need to refresh the page. Stats This page shows a live view of the CPU and Memory usage for your container with 5 minutes worth of historical data (starting when you load the page). New Application This is the page where you can deploy containers. In the top right there's a button to load an app from a template. The page walks you through all of the different information required to deploy a container.","title":"Applications"},{"location":"Pages/applications/#applications","text":"","title":"Applications"},{"location":"Pages/applications/#view-applications","text":"In the main view of the applications page you can see the following: Running Apps: App Name App Status App Image Ports/Port Labels Created time App Actions (down chevron to the left): Start Stop Restart Update (one click utilizing watchtower on the backend) Kill Remove Apps are sortable by the columns at the top or searchable via the searchbar at the top. Click on an app to view more details. Ports will be labeled if they were set when deployed.","title":"View Applications"},{"location":"Pages/applications/#application-info","text":"","title":"Application Info"},{"location":"Pages/applications/#info","text":"In this view you can see configuration settings for your container.","title":"Info"},{"location":"Pages/applications/#processes","text":"This page shows the processes currently running on your container.","title":"Processes"},{"location":"Pages/applications/#logs","text":"The logs page will stream logs from the container to your browser so you don't need to refresh the page.","title":"Logs"},{"location":"Pages/applications/#stats","text":"This page shows a live view of the CPU and Memory usage for your container with 5 minutes worth of historical data (starting when you load the page).","title":"Stats"},{"location":"Pages/applications/#new-application","text":"This is the page where you can deploy containers. In the top right there's a button to load an app from a template. The page walks you through all of the different information required to deploy a container.","title":"New Application"},{"location":"Pages/dashboard/","text":"","title":"Dashboard"},{"location":"Pages/serverSettings/","text":"Server Settings Server Info In the server info section you can import and export the configuration of your server. This is limited to templates and template variables. Template Variables Read more about this section here . Prune Here you can clear out unused images, networks, volumes, and stopped containers. Update Here you can update your server. This will launch watchtower with the --run-once command targeting the name of your Yacht instance and then remove itself once Yacht has been upgraded. This will restart Yacht so don't worry if it becomes unavailable for a short period. Please always backup your configuration in case you run into an issue","title":"Server Settings"},{"location":"Pages/serverSettings/#server-settings","text":"","title":"Server Settings"},{"location":"Pages/serverSettings/#server-info","text":"In the server info section you can import and export the configuration of your server. This is limited to templates and template variables.","title":"Server Info"},{"location":"Pages/serverSettings/#template-variables","text":"Read more about this section here .","title":"Template Variables"},{"location":"Pages/serverSettings/#prune","text":"Here you can clear out unused images, networks, volumes, and stopped containers.","title":"Prune"},{"location":"Pages/serverSettings/#update","text":"Here you can update your server. This will launch watchtower with the --run-once command targeting the name of your Yacht instance and then remove itself once Yacht has been upgraded. This will restart Yacht so don't worry if it becomes unavailable for a short period. Please always backup your configuration in case you run into an issue","title":"Update"},{"location":"Pages/templates/","text":"","title":"Templates"},{"location":"Pages/userSettings/","text":"","title":"User Settings"},{"location":"Templates/templates/","text":"Templates This page will go over building a template. The templates are all compatible with portainer v1 templates so you can always check that documentation too. All of the keys (type, name, title, etc.) are optional and will simply be blank if left empty. Single app templates will be surrounded by {} as is standard for .json files. Multi app templates with consist of multiple {} sections (separated with a , after the } (ie. }, )). More info on writing JSON is available here { \"type\" : 1 , \"title\" : \"App Title\" , \"name\" : \"container-name\" , \"description\" : \"This is a description.\" , \"logo\" : \"https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/transmission-icon.png\" , \"image\" : \"dev/application:latest\" , \"note\" : \"This is a note\" , \"categories\" : [ \"Other\" , \"Tools\" ], \"platform\" : \"linux\" , \"restart_policy\" : \"unless-stopped\" , \"ports\" : [ \"9091:9091/tcp\" , \"9090:9090/tcp\" ], \"volumes\" : [ { \"container\" : \"/data\" , \"bind\" : \"!downloads\" }, { \"container\" : \"/etc/localtime\" , \"bind\" : \"!localtime\" } ], \"sysctls\" : [ { \"net.ipv6.conf.all.disable_ipv6\" : \"0\" } ], \"cap_add\" : [ \"NET_ADMIN\" ], \"env\" : [ { \"name\" : \"PUID\" , \"label\" : \"PUID\" , \"default\" : \"1000\" }, { \"name\" : \"PGID\" , \"label\" : \"PGID\" , \"default\" : \"1000\" }, { \"name\" : \"EnvWithDescription\" , \"label\" : \"EnvWithDescription\" , \"description\" : \"This is a description\" , \"default\" : \"default\" } ] } This is what each section does: type \"type\" : 1 , This currently isn't in use. It's just here to keep compatibility with portainer but is ignored. title \"title\" : \"Transmission-OpenVPN\" , This is what is displayed when in the apps list page. Punctuation is nice here and adds to the polish name \"name\" : \"transmission-openvpn\" , This is what the actual container is named. Information on this is here . description \"description\" : \"This container contains OpenVPN and Transmission with a configuration\\nwhere Transmission is running only when OpenVPN has an active tunnel.\\nIt bundles configuration files for many popular VPN providers to make the setup easier.\" , This is the description that is shown in the app list. \\n is interpreted as a newline character logo \"logo\" : \"https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/transmission-icon.png\" , This is the logo that is show in the app list. image \"image\" : \"haugene/transmission-openvpn:latest\" , This is the image that's pulled from dockerhub. The tag ( :latest ) is optional. note \"note\" : \"List of supported providers available <a href='https://haugene.github.io/docker-transmission-openvpn/supported-providers'/>here</a>.\" , This is shown when someone clicks on \"VIEW\" in the app list. It will render HTML appropriately. categories \"categories\" : [ \"Other\" , \"VPN\" , \"Tools\" ] , A list of categories associated with the application. This is optional but sorting/filtering by category will eventually be a feature. platform \"platform\" : \"linux\" , The platform the image will run on. Haven't tested anything but linux. restart_policy \"restart_policy\" : \"unless-stopped\" , Define your restart policy. Info here . ports \"ports\" : [ \"9091:9091/tcp\" , \"9090:9090/tcp\" , \"9092/tcp\" ] , Ports to be passed through. The host port is on the left of the : and the container port is on the right. Protocol is after the / . If no host port is specified a random one is used. I frequently leave out the host port on applications that use common ports. Port Labels \"ports\" : [ { \"WebUI\" : \"8096:8096/tcp\" , \"HTTPS WebUI\" : \"8920:8920/tcp\" , \"DNLA\" : \"1900:1900/udp\" , \"Discovery\" : \"7359:7359/udp\" } ] , You can label ports for the services that are on them if you would like. This will auto-fill the label field in the deploy form and give users a better understanding of the applications they're running. volumes \"volumes\" : [ { \"container\" : \"/data\" , \"bind\" : \"!downloads\" }, { \"container\" : \"/etc/localtime\" , \"bind\" : \"/etc/localtime\" } ] , List of bind mounts. Container will mount inside of the container and bind will mount on the host. The bind section can utilize Template Variables in the users settings so if they're set they'll be replaced by what's there. sysctls \"sysctls\" : [ { \"net.ipv6.conf.all.disable_ipv6\" : \"0\" } ] , Key value pair for sysctl options. More info available here cap_add \"cap_add\" : [ \"NET_ADMIN\" ] , Value of capabilities you want to add to a container. More info available here . env \"env\" : [ { \"name\" : \"PUID\" , \"label\" : \"PUID\" , \"default\" : \"1000\" }, { \"name\" : \"PGID\" , \"label\" : \"PGID\" , \"default\" : \"1000\" }, { \"name\" : \"EnvWithDescription\" , \"label\" : \"EnvWithDescription\" , \"description\" : \"This is a description\" , \"default\" : \"default\" }, ] Env is used to set environment variables within the docker container. The description and default are both optional. Label currently isn't used but will be what is shown as the name of the field in the deploy form. labels \"labels\" : [ { \"label\" : \"local.yacht.label\" , \"value\" : \"this is a label\" }, { \"label\" : \"local.yacht.otherlabel\" , \"value\" : \"this is another label\" } ] Labels can be used for automating services like traefik automatically as well as store information about containers (this is where port descriptions are stored on containers). These will show up in the advanced section like sysctls and capabilities. devices \"devices\" : [ { \"host\" : \"/dev/null\" , \"container\" : \"/dev/null\" } ] Devices allow devices to be passed through containers for things like transcoding. YAML Yaml templates are also supported and support all of the same options. Here is the example but converted to yaml: --- type : 1 title : App Title name : container-name description : This is a description. logo : https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/transmission-icon.png image : dev/application:latest note : This is a note categories : - Other - Tools platform : linux restart_policy : unless-stopped ports : - 9091:9091/tcp - 9090:9090/tcp volumes : - container : \"/data\" bind : \"!downloads\" - container : \"/etc/localtime\" bind : \"!localtime\" sysctls : - net.ipv6.conf.all.disable_ipv6 : '0' cap_add : - NET_ADMIN env : - name : PUID label : PUID default : '1000' - name : PGID label : PGID default : '1000' - name : EnvWithDescription label : EnvWithDescription description : This is a description default : default","title":"Templates Explained"},{"location":"Templates/templates/#templates","text":"This page will go over building a template. The templates are all compatible with portainer v1 templates so you can always check that documentation too. All of the keys (type, name, title, etc.) are optional and will simply be blank if left empty. Single app templates will be surrounded by {} as is standard for .json files. Multi app templates with consist of multiple {} sections (separated with a , after the } (ie. }, )). More info on writing JSON is available here { \"type\" : 1 , \"title\" : \"App Title\" , \"name\" : \"container-name\" , \"description\" : \"This is a description.\" , \"logo\" : \"https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/transmission-icon.png\" , \"image\" : \"dev/application:latest\" , \"note\" : \"This is a note\" , \"categories\" : [ \"Other\" , \"Tools\" ], \"platform\" : \"linux\" , \"restart_policy\" : \"unless-stopped\" , \"ports\" : [ \"9091:9091/tcp\" , \"9090:9090/tcp\" ], \"volumes\" : [ { \"container\" : \"/data\" , \"bind\" : \"!downloads\" }, { \"container\" : \"/etc/localtime\" , \"bind\" : \"!localtime\" } ], \"sysctls\" : [ { \"net.ipv6.conf.all.disable_ipv6\" : \"0\" } ], \"cap_add\" : [ \"NET_ADMIN\" ], \"env\" : [ { \"name\" : \"PUID\" , \"label\" : \"PUID\" , \"default\" : \"1000\" }, { \"name\" : \"PGID\" , \"label\" : \"PGID\" , \"default\" : \"1000\" }, { \"name\" : \"EnvWithDescription\" , \"label\" : \"EnvWithDescription\" , \"description\" : \"This is a description\" , \"default\" : \"default\" } ] }","title":"Templates"},{"location":"Templates/templates/#this-is-what-each-section-does","text":"","title":"This is what each section does:"},{"location":"Templates/templates/#type","text":"\"type\" : 1 , This currently isn't in use. It's just here to keep compatibility with portainer but is ignored.","title":"type"},{"location":"Templates/templates/#title","text":"\"title\" : \"Transmission-OpenVPN\" , This is what is displayed when in the apps list page. Punctuation is nice here and adds to the polish","title":"title"},{"location":"Templates/templates/#name","text":"\"name\" : \"transmission-openvpn\" , This is what the actual container is named. Information on this is here .","title":"name"},{"location":"Templates/templates/#description","text":"\"description\" : \"This container contains OpenVPN and Transmission with a configuration\\nwhere Transmission is running only when OpenVPN has an active tunnel.\\nIt bundles configuration files for many popular VPN providers to make the setup easier.\" , This is the description that is shown in the app list. \\n is interpreted as a newline character","title":"description"},{"location":"Templates/templates/#logo","text":"\"logo\" : \"https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/transmission-icon.png\" , This is the logo that is show in the app list.","title":"logo"},{"location":"Templates/templates/#image","text":"\"image\" : \"haugene/transmission-openvpn:latest\" , This is the image that's pulled from dockerhub. The tag ( :latest ) is optional.","title":"image"},{"location":"Templates/templates/#note","text":"\"note\" : \"List of supported providers available <a href='https://haugene.github.io/docker-transmission-openvpn/supported-providers'/>here</a>.\" , This is shown when someone clicks on \"VIEW\" in the app list. It will render HTML appropriately.","title":"note"},{"location":"Templates/templates/#categories","text":"\"categories\" : [ \"Other\" , \"VPN\" , \"Tools\" ] , A list of categories associated with the application. This is optional but sorting/filtering by category will eventually be a feature.","title":"categories"},{"location":"Templates/templates/#platform","text":"\"platform\" : \"linux\" , The platform the image will run on. Haven't tested anything but linux.","title":"platform"},{"location":"Templates/templates/#restart_policy","text":"\"restart_policy\" : \"unless-stopped\" , Define your restart policy. Info here .","title":"restart_policy"},{"location":"Templates/templates/#ports","text":"\"ports\" : [ \"9091:9091/tcp\" , \"9090:9090/tcp\" , \"9092/tcp\" ] , Ports to be passed through. The host port is on the left of the : and the container port is on the right. Protocol is after the / . If no host port is specified a random one is used. I frequently leave out the host port on applications that use common ports.","title":"ports"},{"location":"Templates/templates/#port-labels","text":"\"ports\" : [ { \"WebUI\" : \"8096:8096/tcp\" , \"HTTPS WebUI\" : \"8920:8920/tcp\" , \"DNLA\" : \"1900:1900/udp\" , \"Discovery\" : \"7359:7359/udp\" } ] , You can label ports for the services that are on them if you would like. This will auto-fill the label field in the deploy form and give users a better understanding of the applications they're running.","title":"Port Labels"},{"location":"Templates/templates/#volumes","text":"\"volumes\" : [ { \"container\" : \"/data\" , \"bind\" : \"!downloads\" }, { \"container\" : \"/etc/localtime\" , \"bind\" : \"/etc/localtime\" } ] , List of bind mounts. Container will mount inside of the container and bind will mount on the host. The bind section can utilize Template Variables in the users settings so if they're set they'll be replaced by what's there.","title":"volumes"},{"location":"Templates/templates/#sysctls","text":"\"sysctls\" : [ { \"net.ipv6.conf.all.disable_ipv6\" : \"0\" } ] , Key value pair for sysctl options. More info available here","title":"sysctls"},{"location":"Templates/templates/#cap_add","text":"\"cap_add\" : [ \"NET_ADMIN\" ] , Value of capabilities you want to add to a container. More info available here .","title":"cap_add"},{"location":"Templates/templates/#env","text":"\"env\" : [ { \"name\" : \"PUID\" , \"label\" : \"PUID\" , \"default\" : \"1000\" }, { \"name\" : \"PGID\" , \"label\" : \"PGID\" , \"default\" : \"1000\" }, { \"name\" : \"EnvWithDescription\" , \"label\" : \"EnvWithDescription\" , \"description\" : \"This is a description\" , \"default\" : \"default\" }, ] Env is used to set environment variables within the docker container. The description and default are both optional. Label currently isn't used but will be what is shown as the name of the field in the deploy form.","title":"env"},{"location":"Templates/templates/#labels","text":"\"labels\" : [ { \"label\" : \"local.yacht.label\" , \"value\" : \"this is a label\" }, { \"label\" : \"local.yacht.otherlabel\" , \"value\" : \"this is another label\" } ] Labels can be used for automating services like traefik automatically as well as store information about containers (this is where port descriptions are stored on containers). These will show up in the advanced section like sysctls and capabilities.","title":"labels"},{"location":"Templates/templates/#devices","text":"\"devices\" : [ { \"host\" : \"/dev/null\" , \"container\" : \"/dev/null\" } ] Devices allow devices to be passed through containers for things like transcoding.","title":"devices"},{"location":"Templates/templates/#yaml","text":"Yaml templates are also supported and support all of the same options. Here is the example but converted to yaml: --- type : 1 title : App Title name : container-name description : This is a description. logo : https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/transmission-icon.png image : dev/application:latest note : This is a note categories : - Other - Tools platform : linux restart_policy : unless-stopped ports : - 9091:9091/tcp - 9090:9090/tcp volumes : - container : \"/data\" bind : \"!downloads\" - container : \"/etc/localtime\" bind : \"!localtime\" sysctls : - net.ipv6.conf.all.disable_ipv6 : '0' cap_add : - NET_ADMIN env : - name : PUID label : PUID default : '1000' - name : PGID label : PGID default : '1000' - name : EnvWithDescription label : EnvWithDescription description : This is a description default : default","title":"YAML"},{"location":"Templates/variables/","text":"Template Variables Template variables are variables you can set in Server Settings > Template Variables. The Variables on the left (In the Variable Field) gets replaced by the replacement on the right. Currently this only is for Volumes but that will be expanded to environment variables shortly. Typically you'll want to set these first thing when you start up Yacht so once you add a template you can deploy apps without needing to change anything.","title":"Template Variables"},{"location":"Templates/variables/#template-variables","text":"Template variables are variables you can set in Server Settings > Template Variables. The Variables on the left (In the Variable Field) gets replaced by the replacement on the right. Currently this only is for Volumes but that will be expanded to environment variables shortly. Typically you'll want to set these first thing when you start up Yacht so once you add a template you can deploy apps without needing to change anything.","title":"Template Variables"}]}